#ifndef _EZBITSTREAM_H
#define _EZBITSTREAM_H

#include <stdint.h>

/**
 * Type definitions denoting the size of concurrent access to the buffer
 */
namespace ezb {
    typedef uint64_t UINT64;
    typedef uint32_t UINT32;
    typedef uint16_t UINT16;
    typedef uint8_t UINT8;
}

/**
 * Class definitions for bitstreams of various size of concurrent access
 */
namespace ezb {
    /**
     * Defines a bitstream with word size of one byte
     *
     * The interface and implementation support a subset of bitvector operations such as getting, setting, or clearing
     * a bit at a particular index (but not popcount, rank, select, etc.)
     */
    class Bitstream8 {
    public:
        Bitstream8();
        Bitstream8(UINT64 no_bits);
        ~Bitstream8();

        // bit level operations
        void set_bit(UINT64 idx);
        void clear_bit(UINT64 idx);
        bool get_bit(UINT64 idx);

        // word level operations
        UINT8 read_word(UINT64 start, UINT8 no_bits_to_read);
        UINT8 read_word(UINT8 no_bits_to_read=8);
        void write_word(UINT64 start, UINT8 data, UINT8 no_bits_to_write=8);
        void write_word(UINT8 data, UINT8 no_bits_to_write=8);

        // buffer level operations
        void write_buffer(UINT64 start, UINT8* data, UINT64 data_size, UINT64 no_bits_to_write);
        void write_buffer(UINT8* data, UINT64 data_size, UINT64 no_bits_to_write);

        void write_stream(UINT64 start_destination, UINT64 start_source, UINT64 no_bits_to_write, const Bitstream8 &source);
        void write_stream(UINT64 start_source, UINT64 no_bits_to_write, const Bitstream8 &source);
        void write_stream(UINT64 no_bits_to_write, const Bitstream8 &source);

        void flush(UINT8* &buffer, UINT64 &size);

    private:
        void double_capacity();
        UINT64 m_no_bits;
        UINT64 m_pointer;
        UINT8* m_bytes;
        UINT64 m_capacity;
    };

    class Bitstream16 {
        UINT64 no_bits;
        UINT16* two_bytes;
    };

    class Bitstream32 {
        UINT64 no_bits;
        UINT32* four_bytes;
    };

    class Bitstream64 {
        UINT64 no_bits;
        UINT64* eight_bytes;
    };
}

// tables for cached shifts
namespace ezb {
    static const uint8_t MASK_SHIFT_8_LEFT[9] = {
            0b11111111,
            0b11111110,
            0b11111100,
            0b11111000,
            0b11110000,
            0b11100000,
            0b11000000,
            0b10000000,
            0b00000000,
    };

    static const uint8_t MASK_SHIFT_8_RIGHT[9] = {
            0b11111111,
            0b01111111,
            0b00111111,
            0b00011111,
            0b00001111,
            0b00000111,
            0b00000011,
            0b00000001,
            0b00000000,
    };

    static const uint32_t MASK_SHIFT_32_LEFT[33] = {
            0b11111111111111111111111111111111,
            0b11111111111111111111111111111110,
            0b11111111111111111111111111111100,
            0b11111111111111111111111111111000,
            0b11111111111111111111111111110000,
            0b11111111111111111111111111100000,
            0b11111111111111111111111111000000,
            0b11111111111111111111111110000000,
            0b11111111111111111111111100000000,
            0b11111111111111111111111000000000,
            0b11111111111111111111110000000000,
            0b11111111111111111111100000000000,
            0b11111111111111111111000000000000,
            0b11111111111111111110000000000000,
            0b11111111111111111100000000000000,
            0b11111111111111111000000000000000,
            0b11111111111111110000000000000000,
            0b11111111111111100000000000000000,
            0b11111111111111000000000000000000,
            0b11111111111110000000000000000000,
            0b11111111111100000000000000000000,
            0b11111111111000000000000000000000,
            0b11111111110000000000000000000000,
            0b11111111100000000000000000000000,
            0b11111111000000000000000000000000,
            0b11111110000000000000000000000000,
            0b11111100000000000000000000000000,
            0b11111000000000000000000000000000,
            0b11110000000000000000000000000000,
            0b11100000000000000000000000000000,
            0b11000000000000000000000000000000,
            0b10000000000000000000000000000000,
            0b00000000000000000000000000000000,
    };

    static const uint32_t MASK_SHIFT_32_RIGHT[33] = {
            0b11111111111111111111111111111111,
            0b01111111111111111111111111111111,
            0b00111111111111111111111111111111,
            0b00011111111111111111111111111111,
            0b00001111111111111111111111111111,
            0b00000111111111111111111111111111,
            0b00000011111111111111111111111111,
            0b00000001111111111111111111111111,
            0b00000000111111111111111111111111,
            0b00000000011111111111111111111111,
            0b00000000001111111111111111111111,
            0b00000000000111111111111111111111,
            0b00000000000011111111111111111111,
            0b00000000000001111111111111111111,
            0b00000000000000111111111111111111,
            0b00000000000000011111111111111111,
            0b00000000000000001111111111111111,
            0b00000000000000000111111111111111,
            0b00000000000000000011111111111111,
            0b00000000000000000001111111111111,
            0b00000000000000000000111111111111,
            0b00000000000000000000011111111111,
            0b00000000000000000000001111111111,
            0b00000000000000000000000111111111,
            0b00000000000000000000000011111111,
            0b00000000000000000000000001111111,
            0b00000000000000000000000000111111,
            0b00000000000000000000000000011111,
            0b00000000000000000000000000001111,
            0b00000000000000000000000000000111,
            0b00000000000000000000000000000011,
            0b00000000000000000000000000000001,
            0b00000000000000000000000000000000,
    };

    static const uint64_t MASK_SHIFT_64_LEFT[65] = {
            0b1111111111111111111111111111111111111111111111111111111111111111,
            0b1111111111111111111111111111111111111111111111111111111111111110,
            0b1111111111111111111111111111111111111111111111111111111111111100,
            0b1111111111111111111111111111111111111111111111111111111111111000,
            0b1111111111111111111111111111111111111111111111111111111111110000,
            0b1111111111111111111111111111111111111111111111111111111111100000,
            0b1111111111111111111111111111111111111111111111111111111111000000,
            0b1111111111111111111111111111111111111111111111111111111110000000,
            0b1111111111111111111111111111111111111111111111111111111100000000,
            0b1111111111111111111111111111111111111111111111111111111000000000,
            0b1111111111111111111111111111111111111111111111111111110000000000,
            0b1111111111111111111111111111111111111111111111111111100000000000,
            0b1111111111111111111111111111111111111111111111111111000000000000,
            0b1111111111111111111111111111111111111111111111111110000000000000,
            0b1111111111111111111111111111111111111111111111111100000000000000,
            0b1111111111111111111111111111111111111111111111111000000000000000,
            0b1111111111111111111111111111111111111111111111110000000000000000,
            0b1111111111111111111111111111111111111111111111100000000000000000,
            0b1111111111111111111111111111111111111111111111000000000000000000,
            0b1111111111111111111111111111111111111111111110000000000000000000,
            0b1111111111111111111111111111111111111111111100000000000000000000,
            0b1111111111111111111111111111111111111111111000000000000000000000,
            0b1111111111111111111111111111111111111111110000000000000000000000,
            0b1111111111111111111111111111111111111111100000000000000000000000,
            0b1111111111111111111111111111111111111111000000000000000000000000,
            0b1111111111111111111111111111111111111110000000000000000000000000,
            0b1111111111111111111111111111111111111100000000000000000000000000,
            0b1111111111111111111111111111111111111000000000000000000000000000,
            0b1111111111111111111111111111111111110000000000000000000000000000,
            0b1111111111111111111111111111111111100000000000000000000000000000,
            0b1111111111111111111111111111111111000000000000000000000000000000,
            0b1111111111111111111111111111111110000000000000000000000000000000,
            0b1111111111111111111111111111111100000000000000000000000000000000,
            0b1111111111111111111111111111111000000000000000000000000000000000,
            0b1111111111111111111111111111110000000000000000000000000000000000,
            0b1111111111111111111111111111100000000000000000000000000000000000,
            0b1111111111111111111111111111000000000000000000000000000000000000,
            0b1111111111111111111111111110000000000000000000000000000000000000,
            0b1111111111111111111111111100000000000000000000000000000000000000,
            0b1111111111111111111111111000000000000000000000000000000000000000,
            0b1111111111111111111111110000000000000000000000000000000000000000,
            0b1111111111111111111111100000000000000000000000000000000000000000,
            0b1111111111111111111111000000000000000000000000000000000000000000,
            0b1111111111111111111110000000000000000000000000000000000000000000,
            0b1111111111111111111100000000000000000000000000000000000000000000,
            0b1111111111111111111000000000000000000000000000000000000000000000,
            0b1111111111111111110000000000000000000000000000000000000000000000,
            0b1111111111111111100000000000000000000000000000000000000000000000,
            0b1111111111111111000000000000000000000000000000000000000000000000,
            0b1111111111111110000000000000000000000000000000000000000000000000,
            0b1111111111111100000000000000000000000000000000000000000000000000,
            0b1111111111111000000000000000000000000000000000000000000000000000,
            0b1111111111110000000000000000000000000000000000000000000000000000,
            0b1111111111100000000000000000000000000000000000000000000000000000,
            0b1111111111000000000000000000000000000000000000000000000000000000,
            0b1111111110000000000000000000000000000000000000000000000000000000,
            0b1111111100000000000000000000000000000000000000000000000000000000,
            0b1111111000000000000000000000000000000000000000000000000000000000,
            0b1111110000000000000000000000000000000000000000000000000000000000,
            0b1111100000000000000000000000000000000000000000000000000000000000,
            0b1111000000000000000000000000000000000000000000000000000000000000,
            0b1110000000000000000000000000000000000000000000000000000000000000,
            0b1100000000000000000000000000000000000000000000000000000000000000,
            0b1000000000000000000000000000000000000000000000000000000000000000,
            0b0000000000000000000000000000000000000000000000000000000000000000,
    };

    static const uint64_t MASK_SHIFT_64_RIGHT[65] = {
            0b1111111111111111111111111111111111111111111111111111111111111111,
            0b0111111111111111111111111111111111111111111111111111111111111111,
            0b0011111111111111111111111111111111111111111111111111111111111111,
            0b0001111111111111111111111111111111111111111111111111111111111111,
            0b0000111111111111111111111111111111111111111111111111111111111111,
            0b0000011111111111111111111111111111111111111111111111111111111111,
            0b0000001111111111111111111111111111111111111111111111111111111111,
            0b0000000111111111111111111111111111111111111111111111111111111111,
            0b0000000011111111111111111111111111111111111111111111111111111111,
            0b0000000001111111111111111111111111111111111111111111111111111111,
            0b0000000000111111111111111111111111111111111111111111111111111111,
            0b0000000000011111111111111111111111111111111111111111111111111111,
            0b0000000000001111111111111111111111111111111111111111111111111111,
            0b0000000000000111111111111111111111111111111111111111111111111111,
            0b0000000000000011111111111111111111111111111111111111111111111111,
            0b0000000000000001111111111111111111111111111111111111111111111111,
            0b0000000000000000111111111111111111111111111111111111111111111111,
            0b0000000000000000011111111111111111111111111111111111111111111111,
            0b0000000000000000001111111111111111111111111111111111111111111111,
            0b0000000000000000000111111111111111111111111111111111111111111111,
            0b0000000000000000000011111111111111111111111111111111111111111111,
            0b0000000000000000000001111111111111111111111111111111111111111111,
            0b0000000000000000000000111111111111111111111111111111111111111111,
            0b0000000000000000000000011111111111111111111111111111111111111111,
            0b0000000000000000000000001111111111111111111111111111111111111111,
            0b0000000000000000000000000111111111111111111111111111111111111111,
            0b0000000000000000000000000011111111111111111111111111111111111111,
            0b0000000000000000000000000001111111111111111111111111111111111111,
            0b0000000000000000000000000000111111111111111111111111111111111111,
            0b0000000000000000000000000000011111111111111111111111111111111111,
            0b0000000000000000000000000000001111111111111111111111111111111111,
            0b0000000000000000000000000000000111111111111111111111111111111111,
            0b0000000000000000000000000000000011111111111111111111111111111111,
            0b0000000000000000000000000000000001111111111111111111111111111111,
            0b0000000000000000000000000000000000111111111111111111111111111111,
            0b0000000000000000000000000000000000011111111111111111111111111111,
            0b0000000000000000000000000000000000001111111111111111111111111111,
            0b0000000000000000000000000000000000000111111111111111111111111111,
            0b0000000000000000000000000000000000000011111111111111111111111111,
            0b0000000000000000000000000000000000000001111111111111111111111111,
            0b0000000000000000000000000000000000000000111111111111111111111111,
            0b0000000000000000000000000000000000000000011111111111111111111111,
            0b0000000000000000000000000000000000000000001111111111111111111111,
            0b0000000000000000000000000000000000000000000111111111111111111111,
            0b0000000000000000000000000000000000000000000011111111111111111111,
            0b0000000000000000000000000000000000000000000001111111111111111111,
            0b0000000000000000000000000000000000000000000000111111111111111111,
            0b0000000000000000000000000000000000000000000000011111111111111111,
            0b0000000000000000000000000000000000000000000000001111111111111111,
            0b0000000000000000000000000000000000000000000000000111111111111111,
            0b0000000000000000000000000000000000000000000000000011111111111111,
            0b0000000000000000000000000000000000000000000000000001111111111111,
            0b0000000000000000000000000000000000000000000000000000111111111111,
            0b0000000000000000000000000000000000000000000000000000011111111111,
            0b0000000000000000000000000000000000000000000000000000001111111111,
            0b0000000000000000000000000000000000000000000000000000000111111111,
            0b0000000000000000000000000000000000000000000000000000000011111111,
            0b0000000000000000000000000000000000000000000000000000000001111111,
            0b0000000000000000000000000000000000000000000000000000000000111111,
            0b0000000000000000000000000000000000000000000000000000000000011111,
            0b0000000000000000000000000000000000000000000000000000000000001111,
            0b0000000000000000000000000000000000000000000000000000000000000111,
            0b0000000000000000000000000000000000000000000000000000000000000011,
            0b0000000000000000000000000000000000000000000000000000000000000001,
            0b0000000000000000000000000000000000000000000000000000000000000000,
    };

    static const unsigned char REVERSE_BYTE[] = {
            0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0,
            0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
            0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8,
            0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,
            0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4,
            0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,
            0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec,
            0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,
            0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2,
            0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,
            0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea,
            0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,
            0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6,
            0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,
            0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee,
            0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,
            0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1,
            0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,
            0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9,
            0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,
            0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5,
            0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,
            0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed,
            0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,
            0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3,
            0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
            0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb,
            0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
            0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7,
            0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
            0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef,
            0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff,
    };
}

#endif
